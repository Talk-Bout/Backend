generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  nickname String @id
  email    String @unique
  password String

  profile      Profile?
  comment      Comment[]
  post         Post[]
  bookmark     Bookmark[]
  question     Question[]
  answer       Answer[]
  postLike     PostLike[]
  questionLike QuestionLike[]
  answerLike   AnswerLike[]
  review       Review[]
  community    Community[]
}

model Profile {
  profileId  Int     @id @default(autoincrement())
  profilePic String?
  role       String?

  user     User   @relation(fields: [nickname], references: [nickname])
  nickname String
}

model Post {
  postId    Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  content   String

  user     User       @relation(fields: [nickname], references: [nickname])
  nickname String
  category String
  image    String?
  bookmark Bookmark[]
  postLike PostLike[]
  comment  Comment[]
}

model PostLike {
  postLikeId Int    @id @default(autoincrement())
  user       User   @relation(fields: [nickname], references: [nickname])
  nickname   String
  post       Post   @relation(fields: [postId], references: [postId])
  postId     Int

  @@unique([postId, nickname])
}

model Comment {
  commentId Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  content   String

  user     User   @relation(fields: [nickname], references: [nickname])
  nickname String
  post     Post   @relation(fields: [postId], references: [postId])
  postId   Int
}

model Bookmark {
  bookmarkId Int    @id @default(autoincrement())
  user       User   @relation(fields: [nickname], references: [nickname])
  nickname   String
  post       Post   @relation(fields: [postId], references: [postId])
  postId     Int

  @@unique([postId, nickname])
}

model Question {
  questionId   Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  user         User           @relation(fields: [nickname], references: [nickname])
  nickname     String
  title        String
  content      String
  answer       Answer[]
  questionLike QuestionLike[]
}

model QuestionLike {
  questionLikeId Int      @id @default(autoincrement())
  user           User     @relation(fields: [nickname], references: [nickname])
  nickname       String
  question       Question @relation(fields: [questionId], references: [questionId])
  questionId     Int

  @@unique([questionId, nickname])
}

model Answer {
  answerId           Int          @id @default(autoincrement())
  user               User         @relation(fields: [nickname], references: [nickname])
  nickname           String
  content            String
  answerLike         AnswerLike[]
  Question           Question?    @relation(fields: [questionId], references: [questionId])
  questionId         Int
}

model AnswerLike {
  answerLikeId Int    @id @default(autoincrement())
  user         User   @relation(fields: [nickname], references: [nickname])
  nickname     String
  answer       Answer @relation(fields: [answerId], references: [answerId])
  answerId     Int

  @@unique([answerId, nickname])
}

model BootCamp {
  bootcampName String   @id
  desc         String
  logo         String
  review       Review[]
  community    Community[]
}

model Review {
  reviewId             Int       @id @default(autoincrement())
  createdAt            DateTime  @default(now())
  user                 User      @relation(fields: [nickname], references: [nickname])
  nickname             String
  bootcamp             BootCamp  @relation(fields: [bootcampName], references: [bootcampName])
  bootcampName         String
  season               String
  pros                 String
  cons                 String
  stars                Float

  @@unique([nickname, bootcampName])
}

model Community {
  communityId          Int      @id @default(autoincrement())
  createdAt            DateTime @default(now())
  user                 User     @relation(fields: [nickname], references: [nickname])
  nickname             String
  bootcamp             BootCamp  @relation(fields: [bootcampName], references: [bootcampName])
  bootcampName         String
  content              String
}
