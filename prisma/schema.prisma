generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  nickname                        String                 @id                
  snsId                           String                 
  provider                        String
  profilePic                      String?
  role                            String?

  post                            Post[]
  postComment                     PostComment[]
  postLike                        PostLike[]
  postBookmark                    PostBookmark[]
  question                        Question[]
  questionLike                    QuestionLike[]
  questionBookmark                QuestionBookmark[]
  answer                          Answer[]  
  answerLike                      AnswerLike[]
  review                          Review[]
  community                       Community[]
  communityComment                CommunityComment[]
  communityLike                   CommunityLike[]
  communityBookmark               CommunityBookmark[]
  bootcampBookmark                BootcampBookmark[]

  @@unique([snsId, provider])
}

model Feedback {
  FeedbackId                      Int                    @id @default(autoincrement())
  nickname                        String
  content                         String?                @db.Text
}

model Post {
  postId                          Int                    @id @default(autoincrement())
  createdAt                       DateTime               @default(now())
  viewCount                       Int                    @default(0)
  title                           String         
  content                         String                 @db.Text
  category                        String
  image                           Json?
  nickname                        String?

  user                            User?                  @relation(fields: [nickname], references: [nickname], onDelete: SetNull, onUpdate: Cascade) 
  postBookmark                    PostBookmark[]
  postLike                        PostLike[]
  postComment                     PostComment[]
}

model PostComment {
  postCommentId                   Int                    @id @default(autoincrement())
  createdAt                       DateTime               @default(now())
  content                         String                 @db.Text
  nickname                        String?    
  postId                          Int?   

  user                            User?                  @relation(fields: [nickname], references: [nickname], onDelete: SetNull, onUpdate: Cascade)                
  post                            Post?                  @relation(fields: [postId], references: [postId], onDelete: SetNull)
                                            
} 

model PostLike {
  postLikeId                      Int                    @id @default(autoincrement())
  nickname                        String?
  postId                          Int? 
  
  user                            User?                  @relation(fields: [nickname], references: [nickname], onDelete: SetNull, onUpdate: Cascade)           
  post                            Post?                  @relation(fields: [postId], references: [postId], onDelete: SetNull)
                                         
  @@unique([postId, nickname])
}

model PostBookmark {
  postBookmarkId                  Int                    @id @default(autoincrement())
  postId                          Int?
  nickname                        String?

  user                            User?                  @relation(fields: [nickname], references: [nickname], onDelete: SetNull, onUpdate: Cascade)              
  post                            Post?                  @relation(fields: [postId], references: [postId], onDelete: SetNull)

  @@unique([postId, nickname])
}

model Question {
  questionId                      Int                    @id @default(autoincrement())
  createdAt                       DateTime               @default(now())
  viewCount                       Int                    @default(0)
  nickname                        String?
  image                           Json?
  title                           String
  content                         String                 @db.Text
  
  user                            User?                  @relation(fields: [nickname], references: [nickname], onDelete: SetNull, onUpdate: Cascade)
  answer                          Answer[]
  questionLike                    QuestionLike[]
  questionBookmark                QuestionBookmark[]
}

model QuestionLike {
  questionLikeId                  Int                    @id @default(autoincrement())
  nickname                        String?
  questionId                      Int?

  user                            User?                  @relation(fields: [nickname], references: [nickname], onDelete: SetNull, onUpdate: Cascade) 
  question                        Question?              @relation(fields: [questionId], references: [questionId], onDelete: SetNull)
  
  @@unique([questionId, nickname])
}

model QuestionBookmark {
  questionBookmarkId              Int                    @id @default(autoincrement())
  questionId                      Int?
  nickname                        String?            

  user                            User?                  @relation(fields: [nickname], references: [nickname], onDelete: SetNull, onUpdate: Cascade)
  question                        Question?              @relation(fields: [questionId], references: [questionId], onDelete: SetNull)

  @@unique([questionId, nickname])
}

model Answer {
  answerId                        Int                    @id @default(autoincrement())
  createdAt                       DateTime               @default(now())
  questionId                      Int?
  nickname                        String?          
  content                         String           
  image                           Json?

  user                            User?                  @relation(fields: [nickname], references: [nickname], onDelete: SetNull, onUpdate: Cascade)          
  question                        Question?              @relation(fields: [questionId], references: [questionId], onDelete: SetNull)
  answerLike                      AnswerLike[]
}

model AnswerLike {
  answerLikeId                    Int                    @id @default(autoincrement())
  answerId                        Int?
  nickname                        String? 

  user                            User?                  @relation(fields: [nickname], references: [nickname], onDelete: SetNull, onUpdate: Cascade)              
  answer                          Answer?                @relation(fields: [answerId], references: [answerId], onDelete: SetNull)
  
  @@unique([answerId, nickname])
}

model Bootcamp {
  bootcampName                    String                 @id
  desc                            String
  logo                            String
  url                             String
  bootcampInfo                    Json

  review                          Review[]
  community                       Community[]
  bootcampBookmark                BootcampBookmark[]
}

model BootcampBookmark {
  bootcampBookmarkId              Int                    @id @default(autoincrement())
  bootcampName                    String?
  nickname                        String?

  user                            User?                  @relation(fields: [nickname], references: [nickname], onDelete: SetNull, onUpdate: Cascade)         
  bootcamp                        Bootcamp?              @relation(fields: [bootcampName], references: [bootcampName], onDelete: SetNull)

  @@unique([bootcampName, nickname])
}

model Review {
  reviewId                        Int                    @id @default(autoincrement())
  createdAt                       DateTime               @default(now())
  title                           String             
  nickname                        String?             
  bootcampName                    String?
  status                          String
  pros                            String                 @db.Text
  cons                            String                 @db.Text
  stars                           Float

  user                            User?                  @relation(fields: [nickname], references: [nickname], onDelete: SetNull, onUpdate: Cascade)
  bootcamp                        Bootcamp?              @relation(fields: [bootcampName], references: [bootcampName], onDelete: SetNull)

  @@unique([nickname, bootcampName])
}

model Community {
  communityId                     Int                    @id @default(autoincrement())
  createdAt                       DateTime               @default(now())
  viewCount                       Int                    @default(0)
  nickname                        String?   
  bootcampName                    String?  
  image                           Json?  
  title                           String
  content                         String                 @db.Text

  user                            User?                  @relation(fields: [nickname], references: [nickname], onDelete: SetNull, onUpdate: Cascade)
  bootcamp                        Bootcamp?              @relation(fields: [bootcampName], references: [bootcampName], onDelete: SetNull)
  communityLike                   CommunityLike[]
  communityComment                CommunityComment[]
  communityBookmark               CommunityBookmark[]
}

model CommunityComment {
  communityCommentId              Int                    @id @default(autoincrement())
  createdAt                       DateTime               @default(now())
  content                         String                 @db.Text
  nickname                        String?            
  communityId                     Int?

  user                            User?                  @relation(fields: [nickname], references: [nickname], onDelete: SetNull, onUpdate: Cascade)
  community                       Community?             @relation(fields: [communityId], references: [communityId], onDelete: SetNull)
}

model CommunityLike {
  communityLikeId                 Int                    @id @default(autoincrement())
  nickname                        String?            
  communityId                     Int?

  user                            User?                  @relation(fields: [nickname], references: [nickname], onDelete: SetNull, onUpdate: Cascade)
  community                       Community?             @relation(fields: [communityId], references: [communityId], onDelete: SetNull)

  @@unique([communityId, nickname])
}

model CommunityBookmark {
  communityBookmarkId             Int                    @id @default(autoincrement())
  nickname                        String?            
  communityId                     Int?

  user                            User?                  @relation(fields: [nickname], references: [nickname], onDelete: SetNull, onUpdate: Cascade)
  community                       Community?             @relation(fields: [communityId], references: [communityId], onDelete: SetNull)

  @@unique([communityId, nickname])
}